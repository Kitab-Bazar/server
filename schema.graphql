schema {
  query: Query
  mutation: Mutation
}

type Activate {
  errors: [GenericScalar!]
  ok: Boolean
}

input ActivateInputType {
  uid: String!
  token: String!
}

type AuthorListType {
  results: [AuthorType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type AuthorType {
  id: ID!
  name: String!
  aboutAuthor: String
}

input BlogCategoryInputType {
  name: String!
  nameEn: String
  nameNe: String
  parentCategory: String
}

type BlogCategoryListType {
  results: [BlogCategoryType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type BlogCategoryType {
  id: ID!
  name: String!
  parentCategory: BlogCategoryType
}

input BlogInputType {
  title: String
  titleEn: String
  titleNe: String
  description: String
  descriptionEn: String
  descriptionNe: String
  image: Upload
  publishedDate: Date!
  blogPublishType: blog_publish_type
  metaTitle: String
  metaTitleEn: String
  metaTitleNe: String
  metaKeywords: String
  metaKeywordsEn: String
  metaKeywordsNe: String
  metaDescription: String
  metaDescriptionEn: String
  metaDescriptionNe: String
  ogTitle: String
  ogTitleEn: String
  ogTitleNe: String
  ogDescription: String
  ogDescriptionEn: String
  ogDescriptionNe: String
  ogImage: Upload
  ogLocale: String
  ogLocaleEn: String
  ogLocaleNe: String
  ogType: String
  ogTypeEn: String
  ogTypeNe: String
  category: String!
  tags: [ID!]
}

type BlogListType {
  results: [BlogType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

input BlogTagInputType {
  name: String!
  nameEn: String
  nameNe: String
}

type BlogTagListType {
  results: [BlogTagType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type BlogTagType {
  id: ID!
  name: String!
}

type BlogType {
  id: ID!
  title: String!
  description: String!
  image: FileFieldType
  category: BlogCategoryType!
  tags: [BlogTagType!]!
  publishedDate: Date!
  metaTitle: String
  metaKeywords: String
  metaDescription: String
  ogTitle: String
  ogDescription: String
  ogImage: FileFieldType
  ogLocale: String
  ogType: String
  quantityInCart: Int!
}

input BookAuthorInputType {
  name: String!
  nameEn: String
  nameNe: String
  aboutAuthor: String
  aboutAuthorEn: String
  aboutAuthorNe: String
}

input BookCategoryInputType {
  name: String!
  nameEn: String
  nameNe: String
  parentCategory: String
}

input BookCreateInputType {
  title: String!
  titleEn: String
  titleNe: String
  image: Upload
  description: String
  descriptionEn: String
  descriptionNe: String
  isbn: String
  numberOfPages: Int!
  language: BookLanguageEnum!
  weight: Int
  publishedDate: Date!
  edition: String
  grade: BookGradeEnum
  isPublished: Boolean
  price: Int!
  metaTitle: String
  metaTitleEn: String
  metaTitleNe: String
  metaKeywords: String
  metaKeywordsEn: String
  metaKeywordsNe: String
  metaDescription: String
  metaDescriptionEn: String
  metaDescriptionNe: String
  ogTitle: String
  ogTitleEn: String
  ogTitleNe: String
  ogDescription: String
  ogDescriptionEn: String
  ogDescriptionNe: String
  ogImage: Upload
  ogLocale: String
  ogLocaleEn: String
  ogLocaleNe: String
  ogType: String
  ogTypeEn: String
  ogTypeNe: String
  publisher: String!
  categories: [ID!]!
  authors: [ID!]!
  tags: [ID!]
}

type BookDetailType {
  id: ID!
  title: String!
  image: FileFieldType
  description: String
  categories: [CategoryType!]!
  authors: [AuthorType!]!
  tags: [TagType!]!
  isbn: String!
  numberOfPages: Int!
  language: BookLanguageEnum
  weight: Int
  publishedDate: Date!
  edition: String
  publisher: PublisherType!
  grade: BookGradeEnum
  isPublished: Boolean!
  price: Int!
  metaTitle: String
  metaKeywords: String
  metaDescription: String
  ogTitle: String
  ogDescription: String
  ogImage: FileFieldType
  ogLocale: String
  ogType: String
  titleEn: String
  titleNe: String
  descriptionEn: String
  descriptionNe: String
  createdBy: UserType
  metaTitleEn: String
  metaTitleNe: String
  metaKeywordsEn: String
  metaKeywordsNe: String
  metaDescriptionEn: String
  metaDescriptionNe: String
  ogTitleEn: String
  ogTitleNe: String
  ogDescriptionEn: String
  ogDescriptionNe: String
  ogLocaleEn: String
  ogLocaleNe: String
  ogTypeEn: String
  ogTypeNe: String
  bookWishList: [WishListType!]!
  bookCartItem: [CartItemType!]!
  bookOrderCartItem: [BookOrderType!]!
  wishlistId: ID
  cartDetails: CartItemType
  gradeDisplay: EnumDescription
  languageDisplay: EnumDescription
}

enum BookGradeEnum {
  GRADE_1
  GRADE_2
  GRADE_3
}

enum BookLanguageEnum {
  ENGLISH
  NEPALI
  MAITHALI
  THARU
}

type BookListType {
  results: [BookType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type BookOrderListType {
  results: [BookOrderType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type BookOrderType {
  id: ID!
  title: String!
  price: Int!
  quantity: Int!
  isbn: String!
  edition: String!
  image: FileFieldType
}

input BookTagInputType {
  name: String!
  nameEn: String
  nameNe: String
}

type BookType {
  id: ID!
  title: String!
  image: FileFieldType
  description: String
  categories: [CategoryType!]!
  authors: [AuthorType!]!
  tags: [TagType!]!
  isbn: String!
  numberOfPages: Int!
  language: BookLanguageEnum
  weight: Int
  publishedDate: Date!
  edition: String
  publisher: PublisherType!
  grade: BookGradeEnum
  isPublished: Boolean!
  price: Int!
  metaTitle: String
  metaKeywords: String
  metaDescription: String
  ogTitle: String
  ogDescription: String
  ogImage: FileFieldType
  ogLocale: String
  ogType: String
  wishlistId: ID
  cartDetails: CartItemType
  gradeDisplay: EnumDescription
  languageDisplay: EnumDescription
}

input CartItemInputType {
  book: String!
  quantity: Int!
}

type CartItemType {
  id: ID!
  book: BookType!
  quantity: Int!
  totalPrice: Int
}

type CartType {
  results: [CartItemType!]
  totalCount: Int
  page: Int
  pageSize: Int
  grandTotalPrice: Int
  totalQuantity: Int
}

type CategoryListType {
  results: [CategoryType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type CategoryType {
  id: ID!
  name: String!
  parentCategory: CategoryType
}

input ChangePasswordInputType {
  oldPassword: String!
  newPassword: String!
}

type ChangeUserPassword {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserMeType
}

input ContactMessageInputType {
  fullName: String!
  email: String!
  address: String
  message: String
  phoneNumber: String
  messageType: message_type
  municipality: String!
}

type ContactMessageListType {
  results: [ContactMessageType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

enum ContactMessageMessageType {
  PAYMENT_RELATED
  ORDER_RELATED
  COURIER_RELATED
  AUTHOR_PUBLISHER_RELATED
  BUSINESS_RELATED
  FEATURE_SUGGESTIONS_FEEDBACK
  OTHER
}

type ContactMessageType {
  id: ID!
  fullName: String!
  email: String!
  municipality: MunicipalityType!
  address: String!
  message: String!
  phoneNumber: String!
  messageType: ContactMessageMessageType!
}

type CreateBlog {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogType
}

type CreateBlogCategory {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogCategoryType
}

type CreateBlogTag {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogTagType
}

type CreateBook {
  errors: [GenericScalar!]
  ok: Boolean
  result: BookType
}

type CreateBookAuthor {
  errors: [GenericScalar!]
  ok: Boolean
  result: AuthorType
}

type CreateBookCategory {
  errors: [GenericScalar!]
  ok: Boolean
  result: CategoryType
}

type CreateBookTag {
  errors: [GenericScalar!]
  ok: Boolean
  result: TagType
}

type CreateCartItem {
  errors: [GenericScalar!]
  ok: Boolean
  result: CartItemType
}

type CreateContactMessage {
  errors: [GenericScalar!]
  ok: Boolean
  result: ContactMessageType
}

type CreateFaq {
  errors: [GenericScalar!]
  ok: Boolean
  result: FaqType
}

type CreateInstitution {
  errors: [GenericScalar!]
  ok: Boolean
  result: InstitutionType
}

type CreateOrderFromCart {
  errors: [GenericScalar!]
  ok: Boolean
  result: OrderType
}

type CreatePayment {
  errors: [GenericScalar!]
  ok: Boolean
  result: PaymentType
}

type CreatePublisher {
  errors: [GenericScalar!]
  ok: Boolean
  result: PublisherType
}

type CreateSchool {
  errors: [GenericScalar!]
  ok: Boolean
  result: SchoolType
}

type CreateWishList {
  errors: [GenericScalar!]
  ok: Boolean
  result: WishListType
}

scalar Date

scalar DateTime

type DeleteBlog {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogType
}

type DeleteBlogCategory {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogCategoryType
}

type DeleteBlogTag {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogTagType
}

type DeleteBook {
  errors: [GenericScalar!]
  ok: Boolean
  result: BookType
}

type DeleteBookAuthor {
  errors: [GenericScalar!]
  ok: Boolean
  result: AuthorType
}

type DeleteBookCategory {
  errors: [GenericScalar!]
  ok: Boolean
  result: CategoryType
}

type DeleteBookTag {
  errors: [GenericScalar!]
  ok: Boolean
  result: TagType
}

type DeleteCartItem {
  errors: [GenericScalar!]
  ok: Boolean
  result: CartItemType
}

type DeleteContactMessage {
  errors: [GenericScalar!]
  ok: Boolean
  result: ContactMessageType
}

type DeleteFaq {
  errors: [GenericScalar!]
  ok: Boolean
  result: FaqType
}

type DeleteInstitution {
  errors: [GenericScalar!]
  ok: Boolean
  result: InstitutionType
}

type DeleteNotification {
  errors: [GenericScalar!]
  ok: Boolean
  result: NotificationType
}

type DeletePublisher {
  errors: [GenericScalar!]
  ok: Boolean
  result: PublisherType
}

type DeleteSchool {
  errors: [GenericScalar!]
  ok: Boolean
  result: SchoolType
}

type DeleteWishList {
  errors: [GenericScalar!]
  ok: Boolean
  result: WishListType
}

type DistrictListType {
  results: [DistrictType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type DistrictType {
  id: ID!
  name: String!
  province: ProvinceType!
}

scalar EnumDescription

input FaqCreateInputType {
  question: String
  questionEn: String
  questionNe: String
  answer: String
  answerEn: String
  answerNe: String
  faqPublishType: faq_publish_type
}

type FaqListType {
  results: [FaqType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type FaqType {
  id: ID!
  question: String
  answer: String
}

type FileFieldType {
  name: String
  url: String
}

type GenerateResetPasswordToken {
  errors: [GenericScalar!]
  ok: Boolean
}

input GenerateResetPasswordTokenType {
  email: String!
}

scalar GenericScalar

input InstitutionCreateInputType {
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
}

input InstitutionInputType {
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
}

type InstitutionListType {
  results: [InstitutionType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type InstitutionType {
  id: ID!
  name: String!
  municipality: MunicipalityType!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
}

input InstitutionUpdateInputType {
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
}

type Login {
  result: UserMeType
  errors: [GenericScalar!]
  ok: Boolean!
}

input LoginInputType {
  email: String!
  password: String!
}

type Logout {
  ok: Boolean
}

type ModeratorMutationType {
  createPayment(data: PaymentInputType!): CreatePayment
  updatePayment(data: PaymentInputType!, id: ID!): UpdatePayment
  userVerify(id: ID!): VerifyUser
}

type ModeratorQueryType {
  payment(id: ID!): PaymentType
  payments(status: StatusEnum, transactionType: TransactionTypeEnum, paymentType: PaymentTypeEnum, page: Int = 1, ordering: String, pageSize: Int): PaymentListType
  paymentSummary: PaymentSummaryType
  user(id: ID!): ModeratorQueryUserType
  users(email: String, isActive: Boolean, isVerified: Boolean, userType: [UserTypeEnum!], search: String, page: Int = 1, ordering: String, pageSize: Int): ModeratorQueryUserListType
}

type ModeratorQueryUserListType {
  results: [ModeratorQueryUserType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type ModeratorQueryUserType {
  id: ID!
  fullName: String!
  lastLogin: DateTime
  isActive: Boolean!
  email: String!
  phoneNumber: String
  userType: UserTypeEnum!
  image: FileFieldType
  institution: InstitutionType
  publisher: PublisherType
  school: SchoolType
  isVerified: Boolean!
  verifiedBy: UserType
  canonicalName: String!
  userTypeDisplay: EnumDescription!
}

type MunicipalityListType {
  results: [MunicipalityType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type MunicipalityType {
  id: ID!
  name: String!
  province: ProvinceType!
  district: DistrictType!
}

type Mutation {
  createBlog(data: BlogInputType!): CreateBlog
  updateBlog(data: BlogInputType!, id: ID!): UpdateBlog
  deleteBlog(id: ID!): DeleteBlog
  createBlogTag(data: BlogTagInputType!): CreateBlogTag
  updateBlogTag(data: BlogTagInputType!, id: ID!): UpdateBlogTag
  deleteBlogTag(id: ID!): DeleteBlogTag
  createBlogCategory(data: BlogCategoryInputType!): CreateBlogCategory
  updateBlogCategory(data: BlogCategoryInputType!, id: ID!): UpdateBlogCategory
  deleteBlogCategory(id: ID!): DeleteBlogCategory
  createFaq(data: FaqCreateInputType!): CreateFaq
  updateFaq(data: FaqCreateInputType!, id: ID!): UpdateFaq
  deleteFaq(id: ID!): DeleteFaq
  createContactMessage(data: ContactMessageInputType!): CreateContactMessage
  updateContactMessage(data: ContactMessageInputType!, id: ID!): UpdateContactMessage
  deleteContactMessage(id: ID!): DeleteContactMessage
  toggleNotification(data: ToggleNotificationInputType!, id: ID!): ToggleNotificationReadStatus
  deleteNotification(id: ID!): DeleteNotification
  createCartItem(data: CartItemInputType!): CreateCartItem
  updateCartItem(data: CartItemInputType!, id: ID!): UpdateCartItem
  deleteCartItem(id: ID!): DeleteCartItem
  createOrderFromCart: CreateOrderFromCart
  updateOrder(data: OrderUpdateInputType!, id: ID!): UpdateOrder
  createBook(data: BookCreateInputType!): CreateBook
  updateBook(data: BookCreateInputType!, id: ID!): UpdateBook
  deleteBook(id: ID!): DeleteBook
  createWishlist(data: WishListInputType!): CreateWishList
  deleteWishlist(id: ID!): DeleteWishList
  createBookTag(data: BookTagInputType!): CreateBookTag
  updateBookTag(data: BookTagInputType!, id: ID!): UpdateBookTag
  deleteBookTag(id: ID!): DeleteBookTag
  createBookCategory(data: BookCategoryInputType!): CreateBookCategory
  updateBookCategory(data: BookCategoryInputType!, id: ID!): UpdateBookCategory
  deleteBookCategory(id: ID!): DeleteBookCategory
  createBookAuthor(data: BookAuthorInputType!): CreateBookAuthor
  updateBookAuthor(data: BookAuthorInputType!, id: ID!): UpdateBookAuthor
  deleteBookAuthor(id: ID!): DeleteBookAuthor
  createSchool(data: SchoolCreateInputType!): CreateSchool
  updateSchool(data: SchoolCreateInputType!, id: ID!): UpdateSchool
  deleteSchool(id: ID!): DeleteSchool
  createPublisher(data: PublisherCreateInputType!): CreatePublisher
  updatePublisher(data: PublisherCreateInputType!, id: ID!): UpdatePublisher
  deletePublisher(id: ID!): DeletePublisher
  createInstitution(data: InstitutionCreateInputType!): CreateInstitution
  updateInstitution(data: InstitutionCreateInputType!, id: ID!): UpdateInstitution
  deleteInstitution(id: ID!): DeleteInstitution
  register(data: RegisterInputType!): Register
  login(data: LoginInputType!): Login
  activate(data: ActivateInputType!): Activate
  logout: Logout
  changePassword(data: ChangePasswordInputType!): ChangeUserPassword
  generateResetPasswordToken(data: GenerateResetPasswordTokenType!): GenerateResetPasswordToken
  resetPassword(data: ResetPasswordType!): ResetPassword
  updateProfile(data: UpdateProfileType!): UpdateProfile
  moderatorMutation: ModeratorMutationType
}

type NotificationListType {
  results: [NotificationType!]
  totalCount: Int
  page: Int
  pageSize: Int
  readCount: Int
  unreadCount: Int
}

enum NotificationNotificationType {
  ORDER_RECEIVED
  ORDER_PACKED
  ORDER_COMPLETED
  ORDER_CANCELLED
  GENERAL
}

type NotificationType {
  id: ID!
  notificationType: NotificationNotificationType!
  title: String!
  read: Boolean!
  createdAt: DateTime!
  order: OrderType
}

type OrderActivityLogType {
  id: ID!
  order: OrderType!
  createdAt: DateTime!
  createdBy: UserType!
  systemGeneratedComment: String!
  comment: String!
}

type OrderListType {
  results: [OrderType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type OrderStatType {
  totalBooksUploaded: Int
  ordersCompletedCount: Int
  totalBooksOrdered: Int
  stat: [OrderStatisticType!]
}

type OrderStatisticType {
  createdAtDate: Date
  totalQuantity: Int
}

enum OrderStatusEnum {
  PENDING
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

type OrderSummaryType {
  totalBooks: Int
  totalBooksQuantity: Int
  totalPrice: Int
}

type OrderType {
  id: ID!
  totalPrice: Int!
  orderCode: UUID!
  createdAt: DateTime!
  createdBy: UserType!
  status: OrderStatusEnum
  bookOrders(title: String, page: Int = 1, ordering: String, pageSize: Int): BookOrderListType
  totalQuantity: Int
  activityLog: [OrderActivityLogType!]
  statusDisplay: EnumDescription
}

input OrderUpdateInputType {
  status: OrderStatusEnum
  comment: String
}

type OrderWindowListType {
  results: [OrderWindowType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type OrderWindowType {
  id: ID!
  title: String!
  description: String!
  startDate: Date!
  endDate: Date!
}

input PaymentInputType {
  transactionType: TransactionTypeEnum!
  paymentType: PaymentTypeEnum!
  amount: Float!
  status: StatusEnum
  paidBy: String!
}

type PaymentListType {
  results: [PaymentType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type PaymentSummaryType {
  paymentCreditSum: Float
  paymentDebitSum: Float
  totalVerifiedPayment: Float
  totalVerifiedPaymentCount: Float
  totalUnverifiedPayment: Float
  totalUnverifiedPaymentCount: Float
  outstandingBalance: Float
}

type PaymentType {
  id: ID!
  createdAt: DateTime!
  amount: Float!
  createdBy: UserType!
  modifiedBy: UserType!
  paidBy: UserType!
  status: StatusEnum!
  transactionType: TransactionTypeEnum!
  paymentType: PaymentTypeEnum!
  statusDisplay: EnumDescription!
  transactionTypeDisplay: EnumDescription!
  paymentTypeDisplay: EnumDescription!
}

enum PaymentTypeEnum {
  CASH
  CHEQUE
}

type ProvinceListType {
  results: [ProvinceType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type ProvinceType {
  id: ID!
  name: String!
}

input PublisherCreateInputType {
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
}

input PublisherInputType {
  id: Int
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
}

type PublisherListType {
  results: [PublisherType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type PublisherType {
  id: ID!
  name: String!
  municipality: MunicipalityType!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
}

input PublisherUpdateInputType {
  id: Int
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
}

type Query {
  blog(id: ID!): BlogType
  blogs(title: String, categories: [ID!], tags: [ID!], page: Int = 1, ordering: String, pageSize: Int): BlogListType
  blogCategories(name: String, page: Int = 1, ordering: String, pageSize: Int): BlogCategoryListType
  blogTags(name: String, page: Int = 1, ordering: String, pageSize: Int): BlogTagListType
  faq(id: ID!): FaqType
  faqs(page: Int = 1, ordering: String, pageSize: Int): FaqListType
  contactMessage(id: ID!): ContactMessageType
  contactMessages(fullName: String, email: String, municipality: ID, address: String, message: String, phoneNumber: String, messageType: String, page: Int = 1, ordering: String, pageSize: Int): ContactMessageListType
  cartItems(book: ID, createdBy: ID, quantity: Int, page: Int = 1, ordering: String, pageSize: Int): CartType
  order(id: ID!): OrderType
  orders(status: [OrderStatusEnum!], page: Int = 1, ordering: String, pageSize: Int): OrderListType
  orderStat: OrderStatType
  orderSummary: OrderSummaryType
  orderWindowActive: OrderWindowType
  orderWindow(id: ID!): OrderWindowType
  orderWindows(search: String, startDateGte: Date, startDateLte: Date, endDateGte: Date, endDateLte: Date, page: Int = 1, ordering: String, pageSize: Int): OrderWindowListType
  notification(id: ID!): NotificationType
  notifications(title: String, page: Int = 1, ordering: String, pageSize: Int): NotificationListType
  book(id: ID!): BookType
  bookDetail(id: ID!): BookDetailType
  books(categories: [ID!], authors: [ID!], tags: [ID!], publisher: ID, search: String, publishers: [ID!], isAddedInWishlist: Boolean, grade: [BookGradeEnum!], language: [BookLanguageEnum!], page: Int = 1, ordering: String, pageSize: Int): BookListType
  tags(name: String, page: Int = 1, ordering: String, pageSize: Int): TagListType
  authors(name: String, page: Int = 1, ordering: String, pageSize: Int): AuthorListType
  categories(name: String, page: Int = 1, ordering: String, pageSize: Int): CategoryListType
  wishList(createdBy: ID, book: ID, page: Int = 1, ordering: String, pageSize: Int): WishListListType
  schoolQuery: SchoolQueryType
  publisher(id: ID!): PublisherType
  publishers(name: String, provinces: String, districts: String, municipalities: String, wardNumber: String, localAddress: String, panNumber: String, vatNumber: String, page: Int = 1, ordering: String, pageSize: Int): PublisherListType
  institution(id: ID!): InstitutionType
  institutions(name: String, provinces: String, districts: String, municipalities: String, wardNumber: String, localAddress: String, panNumber: String, vatNumber: String, page: Int = 1, ordering: String, pageSize: Int): InstitutionListType
  province(id: ID!): ProvinceType
  provinces(name: String, page: Int = 1, ordering: String, pageSize: Int): ProvinceListType
  municipality(id: ID!): MunicipalityType
  municipalities(name: String, provinces: [ID!], districts: [ID!], page: Int = 1, ordering: String, pageSize: Int): MunicipalityListType
  district(id: ID!): DistrictType
  districts(name: String, provinces: [ID!], page: Int = 1, ordering: String, pageSize: Int): DistrictListType
  me: UserMeType
  moderatorQuery: ModeratorQueryType
}

type Register {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserMeType
}

input RegisterInputType {
  email: String!
  firstName: String
  lastName: String
  password: String!
  phoneNumber: String
  userType: user_type
  institution: InstitutionInputType
  publisher: PublisherInputType
  school: SchoolInputType
}

type ResetPassword {
  errors: [GenericScalar!]
  ok: Boolean
}

input ResetPasswordType {
  passwordResetToken: String!
  uid: String!
  newPassword: String!
}

input SchoolCreateInputType {
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
  schoolId: String
}

input SchoolInputType {
  id: Int
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
  schoolId: String
}

type SchoolListType {
  results: [SchoolType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type SchoolQueryType {
  payment(id: ID!): PaymentType
  payments(status: StatusEnum, transactionType: TransactionTypeEnum, paymentType: PaymentTypeEnum, page: Int = 1, ordering: String, pageSize: Int): PaymentListType
  paymentSummary: PaymentSummaryType
  school(id: ID!): SchoolType
  schools(name: String, provinces: String, districts: String, municipalities: String, wardNumber: String, localAddress: String, panNumber: String, vatNumber: String, page: Int = 1, ordering: String, pageSize: Int): SchoolListType
}

type SchoolType {
  id: ID!
  name: String!
  municipality: MunicipalityType!
  wardNumber: Int!
  localAddress: String
  panNumber: String
  vatNumber: String
  schoolId: String
}

input SchoolUpdateInputType {
  id: Int
  name: String!
  municipality: String!
  wardNumber: Int!
  localAddress: String
  schoolId: String
}

enum StatusEnum {
  PENDING
  VERIFIED
  CANCELLED
}

type TagListType {
  results: [TagType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type TagType {
  id: ID!
  name: String!
}

input ToggleNotificationInputType {
  read: Boolean
}

type ToggleNotificationReadStatus {
  errors: [GenericScalar!]
  ok: Boolean
  result: NotificationType
}

enum TransactionTypeEnum {
  CREDIT
  DEBIT
}

scalar UUID

type UpdateBlog {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogType
}

type UpdateBlogCategory {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogCategoryType
}

type UpdateBlogTag {
  errors: [GenericScalar!]
  ok: Boolean
  result: BlogTagType
}

type UpdateBook {
  errors: [GenericScalar!]
  ok: Boolean
  result: BookType
}

type UpdateBookAuthor {
  errors: [GenericScalar!]
  ok: Boolean
  result: AuthorType
}

type UpdateBookCategory {
  errors: [GenericScalar!]
  ok: Boolean
  result: CategoryType
}

type UpdateBookTag {
  errors: [GenericScalar!]
  ok: Boolean
  result: TagType
}

type UpdateCartItem {
  errors: [GenericScalar!]
  ok: Boolean
  result: CartItemType
}

type UpdateContactMessage {
  errors: [GenericScalar!]
  ok: Boolean
  result: ContactMessageType
}

type UpdateFaq {
  errors: [GenericScalar!]
  ok: Boolean
  result: FaqType
}

type UpdateInstitution {
  errors: [GenericScalar!]
  ok: Boolean
  result: InstitutionType
}

type UpdateOrder {
  errors: [GenericScalar!]
  ok: Boolean
  result: OrderType
}

type UpdatePayment {
  errors: [GenericScalar!]
  ok: Boolean
  result: PaymentType
}

type UpdateProfile {
  errors: [GenericScalar!]
  ok: Boolean
  result: UserMeType
}

input UpdateProfileType {
  firstName: String
  lastName: String
  phoneNumber: String
  image: Upload
  publisher: PublisherUpdateInputType
  school: SchoolUpdateInputType
  institution: InstitutionUpdateInputType
}

type UpdatePublisher {
  errors: [GenericScalar!]
  ok: Boolean
  result: PublisherType
}

type UpdateSchool {
  errors: [GenericScalar!]
  ok: Boolean
  result: SchoolType
}

scalar Upload

type UserMeType {
  id: ID!
  fullName: String!
  lastLogin: DateTime
  isActive: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  userType: UserTypeEnum!
  image: FileFieldType
  institution: InstitutionType
  publisher: PublisherType
  school: SchoolType
  isVerified: Boolean!
  canonicalName: String!
  userTypeDisplay: EnumDescription!
  allowedPermissions: [UserPermissions!]!
}

enum UserPermissions {
  CAN_CREATE_BOOK
  CAN_UPDATE_BOOK
  CAN_DELETE_BOOK
  CAN_RETRIEVE_BOOK
  CAN_CREATE_BOOK_CATEGORY
  CAN_UPDATE_BOOK_CATEGORY
  CAN_DELETE_BOOK_CATEGORY
  CAN_RETRIEVE_BOOK_CATEGORY
  CAN_CREATE_BOOK_AUTHOR
  CAN_UPDATE_BOOK_AUTHOR
  CAN_DELETE_BOOK_AUTHOR
  CAN_RETRIEVE_BOOK_AUTHOR
  CAN_CREATE_BOOK_TAG
  CAN_UPDATE_BOOK_TAG
  CAN_DELETE_BOOK_TAG
  CAN_RETRIEVE_BOOK_TAG
  CAN_CREATE_PUBLISHER
  CAN_UPDATE_PUBLISHER
  CAN_DELETE_PUBLISHER
  CAN_RETRIEVE_PUBLISHER
  CAN_CREATE_SCHOOL
  CAN_UPDATE_SCHOOL
  CAN_DELETE_SCHOOL
  CAN_RETRIEVE_SCHOOL
  CAN_CREATE_INSTITUTION
  CAN_UPDATE_INSTITUTION
  CAN_DELETE_INSTITUTION
  CAN_RETRIEVE_INSTITUTION
  CREATE_ORDER
  UPDATE_ORDER
  DELETE_ORDER
  RETRIEVE_ORDER
  CREATE_FAQ
  UPDATE_FAQ
  DELETE_FAQ
  RETRIEVE_FAQ
  CREATE_CONTACT_MESSAGE
  UPDATE_CONTACT_MESSAGE
  DELETE_CONTACT_MESSAGE
  RETRIEVE_CONTACT_MESSAGE
  CAN_CREATE_BLOG
  CAN_UPDATE_BLOG
  CAN_DELETE_BLOG
  CAN_RETRIEVE_BLOG
  CAN_CREATE_BLOG_CATEGORY
  CAN_UPDATE_BLOG_CATEGORY
  CAN_DELETE_BLOG_CATEGORY
  CAN_RETRIEVE_BLOG_CATEGORY
  CAN_CREATE_BLOG_TAG
  CAN_UPDATE_BLOG_TAG
  CAN_DELETE_BLOG_TAG
  CAN_RETRIEVE_BLOG_TAG
  CAN_VERIFY_USER
  CAN_CREATE_PAYMENT
  CAN_UPDATE_PAYMENT
  ACTIVITY_LOG_FILE
  CAN_CRUD_CART_ITEM
}

type UserType {
  id: ID!
  fullName: String!
  canonicalName: String!
  image: FileFieldType
  userType: UserTypeEnum!
  userTypeDisplay: EnumDescription!
}

enum UserTypeEnum {
  MODERATOR
  PUBLISHER
  INSTITUTIONAL_USER
  SCHOOL_ADMIN
  INDIVIDUAL_USER
}

type VerifyUser {
  errors: [GenericScalar!]
  ok: Boolean
  result: ModeratorQueryUserType
}

input WishListInputType {
  book: String!
}

type WishListListType {
  results: [WishListType!]
  totalCount: Int
  page: Int
  pageSize: Int
}

type WishListType {
  id: ID!
  book: BookType!
}

enum blog_publish_type {
  PUBLISH
  DRAFT
}

enum faq_publish_type {
  PUBLISH
  DRAFT
}

enum message_type {
  PAYMENT_RELATED
  ORDER_RELATED
  COURIER_RELATED
  AUTHOR_PUBLISHER_RELATED
  BUSINESS_RELATED
  FEATURE_SUGGESTIONS_FEEDBACK
  OTHER
}

enum user_type {
  MODERATOR
  PUBLISHER
  INSTITUTIONAL_USER
  SCHOOL_ADMIN
  INDIVIDUAL_USER
}
